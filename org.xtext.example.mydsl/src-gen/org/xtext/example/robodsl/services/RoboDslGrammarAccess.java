/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.robodsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RoboDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.EScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEScriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScriptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRunsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMainbodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMainbodyMainBodyParserRuleCall_5_0 = (RuleCall)cMainbodyAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EScript:
		//	{EScript}
		//	'Script'
		//	Name=EString 'runs'
		//	'as'
		//	mainbody=MainBody 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{EScript} 'Script' Name=EString 'runs' 'as' mainbody=MainBody 'end'
		public Group getGroup() { return cGroup; }
		
		//{EScript}
		public Action getEScriptAction_0() { return cEScriptAction_0; }
		
		//'Script'
		public Keyword getScriptKeyword_1() { return cScriptKeyword_1; }
		
		//Name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'runs'
		public Keyword getRunsKeyword_3() { return cRunsKeyword_3; }
		
		//'as'
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//mainbody=MainBody
		public Assignment getMainbodyAssignment_5() { return cMainbodyAssignment_5; }
		
		//MainBody
		public RuleCall getMainbodyMainBodyParserRuleCall_5_0() { return cMainbodyMainBodyParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cECommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRepeateStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTurnLeftCmdParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTraceCmdParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDropCmdParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStepCmdParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPickCmdParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDropMarkCmdParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPickMarkCmdParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDestroyWallCmdParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cBuildWallCmdParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Command:
		//	EComment | IfStatement | WhileStatement | RepeateStatement | TurnLeftCmd | TraceCmd | DropCmd | StepCmd | PickCmd |
		//	DropMarkCmd | PickMarkCmd | DestroyWallCmd | BuildWallCmd;
		@Override public ParserRule getRule() { return rule; }
		
		//EComment | IfStatement | WhileStatement | RepeateStatement | TurnLeftCmd | TraceCmd | DropCmd | StepCmd | PickCmd |
		//DropMarkCmd | PickMarkCmd | DestroyWallCmd | BuildWallCmd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EComment
		public RuleCall getECommentParserRuleCall_0() { return cECommentParserRuleCall_0; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_1() { return cIfStatementParserRuleCall_1; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }
		
		//RepeateStatement
		public RuleCall getRepeateStatementParserRuleCall_3() { return cRepeateStatementParserRuleCall_3; }
		
		//TurnLeftCmd
		public RuleCall getTurnLeftCmdParserRuleCall_4() { return cTurnLeftCmdParserRuleCall_4; }
		
		//TraceCmd
		public RuleCall getTraceCmdParserRuleCall_5() { return cTraceCmdParserRuleCall_5; }
		
		//DropCmd
		public RuleCall getDropCmdParserRuleCall_6() { return cDropCmdParserRuleCall_6; }
		
		//StepCmd
		public RuleCall getStepCmdParserRuleCall_7() { return cStepCmdParserRuleCall_7; }
		
		//PickCmd
		public RuleCall getPickCmdParserRuleCall_8() { return cPickCmdParserRuleCall_8; }
		
		//DropMarkCmd
		public RuleCall getDropMarkCmdParserRuleCall_9() { return cDropMarkCmdParserRuleCall_9; }
		
		//PickMarkCmd
		public RuleCall getPickMarkCmdParserRuleCall_10() { return cPickMarkCmdParserRuleCall_10; }
		
		//DestroyWallCmd
		public RuleCall getDestroyWallCmdParserRuleCall_11() { return cDestroyWallCmdParserRuleCall_11; }
		
		//BuildWallCmd
		public RuleCall getBuildWallCmdParserRuleCall_12() { return cBuildWallCmdParserRuleCall_12; }
	}
	public class MainBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.MainBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommandAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_1_0_0 = (RuleCall)cCommandAssignment_1_0.eContents().get(0);
		private final Assignment cCommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_1_1_0 = (RuleCall)cCommandAssignment_1_1.eContents().get(0);
		
		//// | RoutineDecl | RoutineCall;
		//MainBody:
		//	{MainBody} (command+=Command command+=Command*);
		@Override public ParserRule getRule() { return rule; }
		
		//{MainBody} (command+=Command command+=Command*)
		public Group getGroup() { return cGroup; }
		
		//{MainBody}
		public Action getMainBodyAction_0() { return cMainBodyAction_0; }
		
		//command+=Command command+=Command*
		public Group getGroup_1() { return cGroup_1; }
		
		//command+=Command
		public Assignment getCommandAssignment_1_0() { return cCommandAssignment_1_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_1_0_0() { return cCommandCommandParserRuleCall_1_0_0; }
		
		//command+=Command*
		public Assignment getCommandAssignment_1_1() { return cCommandAssignment_1_1; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_1_1_0() { return cCommandCommandParserRuleCall_1_1_0; }
	}
	public class SubBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.SubBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		private final Assignment cCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandCommandParserRuleCall_2_0 = (RuleCall)cCommandAssignment_2.eContents().get(0);
		
		//SubBody:
		//	{SubBody} command+=Command command+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SubBody} command+=Command command+=Command*
		public Group getGroup() { return cGroup; }
		
		//{SubBody}
		public Action getSubBodyAction_0() { return cSubBodyAction_0; }
		
		//command+=Command
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_1_0() { return cCommandCommandParserRuleCall_1_0; }
		
		//command+=Command*
		public Assignment getCommandAssignment_2() { return cCommandAssignment_2; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_2_0() { return cCommandCommandParserRuleCall_2_0; }
	}
	public class ECommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.EComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cECommentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentCOMMENTSTRINGTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		
		//EComment:
		//	{EComment} comment=COMMENTSTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{EComment} comment=COMMENTSTRING
		public Group getGroup() { return cGroup; }
		
		//{EComment}
		public Action getECommentAction_0() { return cECommentAction_0; }
		
		//comment=COMMENTSTRING
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//COMMENTSTRING
		public RuleCall getCommentCOMMENTSTRINGTerminalRuleCall_1_0() { return cCommentCOMMENTSTRINGTerminalRuleCall_1_0; }
	}
	public class TurnLeftCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.TurnLeftCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTurnLeftCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTurnLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TurnLeftCmd:
		//	{TurnLeftCmd}
		//	'turnLeft';
		@Override public ParserRule getRule() { return rule; }
		
		//{TurnLeftCmd} 'turnLeft'
		public Group getGroup() { return cGroup; }
		
		//{TurnLeftCmd}
		public Action getTurnLeftCmdAction_0() { return cTurnLeftCmdAction_0; }
		
		//'turnLeft'
		public Keyword getTurnLeftKeyword_1() { return cTurnLeftKeyword_1; }
	}
	public class TraceCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.TraceCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTraceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTraceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTraceTRACESTRINGTerminalRuleCall_2_0 = (RuleCall)cTraceAssignment_2.eContents().get(0);
		
		//TraceCmd:
		//	{TraceCmd}
		//	'trace' trace=TRACESTRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{TraceCmd} 'trace' trace=TRACESTRING
		public Group getGroup() { return cGroup; }
		
		//{TraceCmd}
		public Action getTraceCmdAction_0() { return cTraceCmdAction_0; }
		
		//'trace'
		public Keyword getTraceKeyword_1() { return cTraceKeyword_1; }
		
		//trace=TRACESTRING
		public Assignment getTraceAssignment_2() { return cTraceAssignment_2; }
		
		//TRACESTRING
		public RuleCall getTraceTRACESTRINGTerminalRuleCall_2_0() { return cTraceTRACESTRINGTerminalRuleCall_2_0; }
	}
	public class DropCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.DropCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDropKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DropCmd:
		//	{DropCmd}
		//	'drop';
		@Override public ParserRule getRule() { return rule; }
		
		//{DropCmd} 'drop'
		public Group getGroup() { return cGroup; }
		
		//{DropCmd}
		public Action getDropCmdAction_0() { return cDropCmdAction_0; }
		
		//'drop'
		public Keyword getDropKeyword_1() { return cDropKeyword_1; }
	}
	public class StepCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.StepCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StepCmd:
		//	{StepCmd}
		//	'step';
		@Override public ParserRule getRule() { return rule; }
		
		//{StepCmd} 'step'
		public Group getGroup() { return cGroup; }
		
		//{StepCmd}
		public Action getStepCmdAction_0() { return cStepCmdAction_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
	}
	public class PickCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.PickCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPickCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PickCmd:
		//	{PickCmd}
		//	'pick';
		@Override public ParserRule getRule() { return rule; }
		
		//{PickCmd} 'pick'
		public Group getGroup() { return cGroup; }
		
		//{PickCmd}
		public Action getPickCmdAction_0() { return cPickCmdAction_0; }
		
		//'pick'
		public Keyword getPickKeyword_1() { return cPickKeyword_1; }
	}
	public class DropMarkCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.DropMarkCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDropMarkCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDropMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationLocationParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//DropMarkCmd:
		//	{DropMarkCmd}
		//	'dropMark'
		//	location=Location;
		@Override public ParserRule getRule() { return rule; }
		
		//{DropMarkCmd} 'dropMark' location=Location
		public Group getGroup() { return cGroup; }
		
		//{DropMarkCmd}
		public Action getDropMarkCmdAction_0() { return cDropMarkCmdAction_0; }
		
		//'dropMark'
		public Keyword getDropMarkKeyword_1() { return cDropMarkKeyword_1; }
		
		//location=Location
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_2_0() { return cLocationLocationParserRuleCall_2_0; }
	}
	public class PickMarkCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.PickMarkCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPickMarkCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPickMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationLocationParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//PickMarkCmd:
		//	{PickMarkCmd}
		//	'pickMark'
		//	location=Location;
		@Override public ParserRule getRule() { return rule; }
		
		//{PickMarkCmd} 'pickMark' location=Location
		public Group getGroup() { return cGroup; }
		
		//{PickMarkCmd}
		public Action getPickMarkCmdAction_0() { return cPickMarkCmdAction_0; }
		
		//'pickMark'
		public Keyword getPickMarkKeyword_1() { return cPickMarkKeyword_1; }
		
		//location=Location
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_2_0() { return cLocationLocationParserRuleCall_2_0; }
	}
	public class DestroyWallCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.DestroyWallCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDestroyWallCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDestroyWallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationLocationParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//DestroyWallCmd:
		//	{DestroyWallCmd}
		//	'destroyWall'
		//	location=Location;
		@Override public ParserRule getRule() { return rule; }
		
		//{DestroyWallCmd} 'destroyWall' location=Location
		public Group getGroup() { return cGroup; }
		
		//{DestroyWallCmd}
		public Action getDestroyWallCmdAction_0() { return cDestroyWallCmdAction_0; }
		
		//'destroyWall'
		public Keyword getDestroyWallKeyword_1() { return cDestroyWallKeyword_1; }
		
		//location=Location
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_2_0() { return cLocationLocationParserRuleCall_2_0; }
	}
	public class BuildWallCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.BuildWallCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildWallCmdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBuildWallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationLocationParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//BuildWallCmd:
		//	{BuildWallCmd}
		//	'buildWall'
		//	location=Location;
		@Override public ParserRule getRule() { return rule; }
		
		//{BuildWallCmd} 'buildWall' location=Location
		public Group getGroup() { return cGroup; }
		
		//{BuildWallCmd}
		public Action getBuildWallCmdAction_0() { return cBuildWallCmdAction_0; }
		
		//'buildWall'
		public Keyword getBuildWallKeyword_1() { return cBuildWallKeyword_1; }
		
		//location=Location
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_2_0() { return cLocationLocationParserRuleCall_2_0; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRowAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowEIntegerParserRuleCall_2_0 = (RuleCall)cRowAssignment_2.eContents().get(0);
		private final Keyword cColKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColEIntegerParserRuleCall_4_0 = (RuleCall)cColAssignment_4.eContents().get(0);
		
		//Location:
		//	{Location}
		//	'row:' row=EInteger 'col:' col=EInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//{Location} 'row:' row=EInteger 'col:' col=EInteger
		public Group getGroup() { return cGroup; }
		
		//{Location}
		public Action getLocationAction_0() { return cLocationAction_0; }
		
		//'row:'
		public Keyword getRowKeyword_1() { return cRowKeyword_1; }
		
		//row=EInteger
		public Assignment getRowAssignment_2() { return cRowAssignment_2; }
		
		//EInteger
		public RuleCall getRowEIntegerParserRuleCall_2_0() { return cRowEIntegerParserRuleCall_2_0; }
		
		//'col:'
		public Keyword getColKeyword_3() { return cColKeyword_3; }
		
		//col=EInteger
		public Assignment getColAssignment_4() { return cColAssignment_4; }
		
		//EInteger
		public RuleCall getColEIntegerParserRuleCall_4_0() { return cColEIntegerParserRuleCall_4_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionmodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionmodelConditionModelParserRuleCall_2_0 = (RuleCall)cConditionmodelAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubbodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubbodySubBodyParserRuleCall_4_0 = (RuleCall)cSubbodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDoKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cElsebodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cElsebodySubBodyParserRuleCall_5_2_0 = (RuleCall)cElsebodyAssignment_5_2.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//	{IfStatement}
		//	'if'
		//	conditionmodel=ConditionModel
		//	'do'
		//	subbody=SubBody ('else' 'do' elsebody=SubBody)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} 'if' conditionmodel=ConditionModel 'do' subbody=SubBody ('else' 'do' elsebody=SubBody)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//conditionmodel=ConditionModel
		public Assignment getConditionmodelAssignment_2() { return cConditionmodelAssignment_2; }
		
		//ConditionModel
		public RuleCall getConditionmodelConditionModelParserRuleCall_2_0() { return cConditionmodelConditionModelParserRuleCall_2_0; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//subbody=SubBody
		public Assignment getSubbodyAssignment_4() { return cSubbodyAssignment_4; }
		
		//SubBody
		public RuleCall getSubbodySubBodyParserRuleCall_4_0() { return cSubbodySubBodyParserRuleCall_4_0; }
		
		//('else' 'do' elsebody=SubBody)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//'do'
		public Keyword getDoKeyword_5_1() { return cDoKeyword_5_1; }
		
		//elsebody=SubBody
		public Assignment getElsebodyAssignment_5_2() { return cElsebodyAssignment_5_2; }
		
		//SubBody
		public RuleCall getElsebodySubBodyParserRuleCall_5_2_0() { return cElsebodySubBodyParserRuleCall_5_2_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionmodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionmodelConditionModelParserRuleCall_2_0 = (RuleCall)cConditionmodelAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubbodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubbodySubBodyParserRuleCall_4_0 = (RuleCall)cSubbodyAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WhileStatement:
		//	{WhileStatement}
		//	'while'
		//	conditionmodel=ConditionModel
		//	'do'
		//	subbody=SubBody
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileStatement} 'while' conditionmodel=ConditionModel 'do' subbody=SubBody 'end'
		public Group getGroup() { return cGroup; }
		
		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//conditionmodel=ConditionModel
		public Assignment getConditionmodelAssignment_2() { return cConditionmodelAssignment_2; }
		
		//ConditionModel
		public RuleCall getConditionmodelConditionModelParserRuleCall_2_0() { return cConditionmodelConditionModelParserRuleCall_2_0; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//subbody=SubBody
		public Assignment getSubbodyAssignment_4() { return cSubbodyAssignment_4; }
		
		//SubBody
		public RuleCall getSubbodySubBodyParserRuleCall_4_0() { return cSubbodySubBodyParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class RepeateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.RepeateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRepeateStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRepeatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCountEIntegerParserRuleCall_2_0 = (RuleCall)cCountAssignment_2.eContents().get(0);
		private final Keyword cTimesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSubbodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubbodySubBodyParserRuleCall_4_0 = (RuleCall)cSubbodyAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RepeateStatement:
		//	{RepeateStatement}
		//	'Repeat'
		//	count=EInteger
		//	'times'
		//	subbody=SubBody
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{RepeateStatement} 'Repeat' count=EInteger 'times' subbody=SubBody 'end'
		public Group getGroup() { return cGroup; }
		
		//{RepeateStatement}
		public Action getRepeateStatementAction_0() { return cRepeateStatementAction_0; }
		
		//'Repeat'
		public Keyword getRepeatKeyword_1() { return cRepeatKeyword_1; }
		
		//count=EInteger
		public Assignment getCountAssignment_2() { return cCountAssignment_2; }
		
		//EInteger
		public RuleCall getCountEIntegerParserRuleCall_2_0() { return cCountEIntegerParserRuleCall_2_0; }
		
		//'times'
		public Keyword getTimesKeyword_3() { return cTimesKeyword_3; }
		
		//subbody=SubBody
		public Assignment getSubbodyAssignment_4() { return cSubbodyAssignment_4; }
		
		//SubBody
		public RuleCall getSubbodySubBodyParserRuleCall_4_0() { return cSubbodySubBodyParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class ConditionModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.ConditionModel");
		private final RuleCall cOrCondParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionModel:
		//	OrCond;
		@Override public ParserRule getRule() { return rule; }
		
		//OrCond
		public RuleCall getOrCondParserRuleCall() { return cOrCondParserRuleCall; }
	}
	public class OrCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.OrCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsAndCondParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsOrCondParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//OrCond:
		//	lhs=AndCond ('or' rhs=OrCond)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=AndCond ('or' rhs=OrCond)?
		public Group getGroup() { return cGroup; }
		
		//lhs=AndCond
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//AndCond
		public RuleCall getLhsAndCondParserRuleCall_0_0() { return cLhsAndCondParserRuleCall_0_0; }
		
		//('or' rhs=OrCond)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//rhs=OrCond
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//OrCond
		public RuleCall getRhsOrCondParserRuleCall_1_1_0() { return cRhsOrCondParserRuleCall_1_1_0; }
	}
	public class AndCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.AndCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsNotCondParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsAndCondParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//AndCond:
		//	lhs=NotCond ('and' rhs=AndCond)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=NotCond ('and' rhs=AndCond)?
		public Group getGroup() { return cGroup; }
		
		//lhs=NotCond
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//NotCond
		public RuleCall getLhsNotCondParserRuleCall_0_0() { return cLhsNotCondParserRuleCall_0_0; }
		
		//('and' rhs=AndCond)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//rhs=AndCond
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//AndCond
		public RuleCall getRhsAndCondParserRuleCall_1_1_0() { return cRhsAndCondParserRuleCall_1_1_0; }
	}
	public class NotCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.NotCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotNotKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Assignment cBracketsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBracketsBracketsCondParserRuleCall_1_0 = (RuleCall)cBracketsAssignment_1.eContents().get(0);
		
		//NotCond:
		//	not?='not'? brackets=BracketsCond;
		@Override public ParserRule getRule() { return rule; }
		
		//not?='not'? brackets=BracketsCond
		public Group getGroup() { return cGroup; }
		
		//not?='not'?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//'not'
		public Keyword getNotNotKeyword_0_0() { return cNotNotKeyword_0_0; }
		
		//brackets=BracketsCond
		public Assignment getBracketsAssignment_1() { return cBracketsAssignment_1; }
		
		//BracketsCond
		public RuleCall getBracketsBracketsCondParserRuleCall_1_0() { return cBracketsBracketsCondParserRuleCall_1_0; }
	}
	public class BracketsCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.BracketsCond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOrcondAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOrcondOrCondParserRuleCall_0_1_0 = (RuleCall)cOrcondAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConditionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//BracketsCond:
		//	'(' orcond=OrCond ')' | condition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' orcond=OrCond ')' | condition=Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' orcond=OrCond ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//orcond=OrCond
		public Assignment getOrcondAssignment_0_1() { return cOrcondAssignment_0_1; }
		
		//OrCond
		public RuleCall getOrcondOrCondParserRuleCall_0_1_0() { return cOrcondOrCondParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMarkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWallAheadParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHeadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Condition:
		//	Full | Mark | WallAhead | Heading;
		@Override public ParserRule getRule() { return rule; }
		
		//Full | Mark | WallAhead | Heading
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Full
		public RuleCall getFullParserRuleCall_0() { return cFullParserRuleCall_0; }
		
		//Mark
		public RuleCall getMarkParserRuleCall_1() { return cMarkParserRuleCall_1; }
		
		//WallAhead
		public RuleCall getWallAheadParserRuleCall_2() { return cWallAheadParserRuleCall_2; }
		
		//Heading
		public RuleCall getHeadingParserRuleCall_3() { return cHeadingParserRuleCall_3; }
	}
	public class FullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Full");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Full Condition:
		//	{Condition} 'full';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} 'full'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'full'
		public Keyword getFullKeyword_1() { return cFullKeyword_1; }
	}
	public class MarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Mark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mark Condition:
		//	{Condition} 'mark';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} 'mark'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'mark'
		public Keyword getMarkKeyword_1() { return cMarkKeyword_1; }
	}
	public class WallAheadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.WallAhead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAheadKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WallAhead Condition:
		//	{Condition} 'wall' 'ahead';
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} 'wall' 'ahead'
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'wall'
		public Keyword getWallKeyword_1() { return cWallKeyword_1; }
		
		//'ahead'
		public Keyword getAheadKeyword_2() { return cAheadKeyword_2; }
	}
	public class HeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.Heading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHeadingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cNorthKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cEastKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cSouthKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cWestKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		
		//Heading Condition:
		//	{Condition} 'heading' ('north' | 'east' | 'south' | 'west');
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition} 'heading' ('north' | 'east' | 'south' | 'west')
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//'heading'
		public Keyword getHeadingKeyword_1() { return cHeadingKeyword_1; }
		
		//'north' | 'east' | 'south' | 'west'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'north'
		public Keyword getNorthKeyword_2_0() { return cNorthKeyword_2_0; }
		
		//'east'
		public Keyword getEastKeyword_2_1() { return cEastKeyword_2_1; }
		
		//'south'
		public Keyword getSouthKeyword_2_2() { return cSouthKeyword_2_2; }
		
		//'west'
		public Keyword getWestKeyword_2_3() { return cWestKeyword_2_3; }
	}
	public class EIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.EInteger");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInteger ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final EScriptElements pEScript;
	private final CommandElements pCommand;
	private final MainBodyElements pMainBody;
	private final SubBodyElements pSubBody;
	private final ECommentElements pEComment;
	private final TurnLeftCmdElements pTurnLeftCmd;
	private final TraceCmdElements pTraceCmd;
	private final DropCmdElements pDropCmd;
	private final StepCmdElements pStepCmd;
	private final PickCmdElements pPickCmd;
	private final DropMarkCmdElements pDropMarkCmd;
	private final PickMarkCmdElements pPickMarkCmd;
	private final DestroyWallCmdElements pDestroyWallCmd;
	private final BuildWallCmdElements pBuildWallCmd;
	private final LocationElements pLocation;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final RepeateStatementElements pRepeateStatement;
	private final ConditionModelElements pConditionModel;
	private final OrCondElements pOrCond;
	private final AndCondElements pAndCond;
	private final NotCondElements pNotCond;
	private final BracketsCondElements pBracketsCond;
	private final ConditionElements pCondition;
	private final FullElements pFull;
	private final MarkElements pMark;
	private final WallAheadElements pWallAhead;
	private final HeadingElements pHeading;
	private final EIntegerElements pEInteger;
	private final EStringElements pEString;
	private final TerminalRule tTRACESTRING;
	private final TerminalRule tCOMMENTSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RoboDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEScript = new EScriptElements();
		this.pCommand = new CommandElements();
		this.pMainBody = new MainBodyElements();
		this.pSubBody = new SubBodyElements();
		this.pEComment = new ECommentElements();
		this.pTurnLeftCmd = new TurnLeftCmdElements();
		this.pTraceCmd = new TraceCmdElements();
		this.pDropCmd = new DropCmdElements();
		this.pStepCmd = new StepCmdElements();
		this.pPickCmd = new PickCmdElements();
		this.pDropMarkCmd = new DropMarkCmdElements();
		this.pPickMarkCmd = new PickMarkCmdElements();
		this.pDestroyWallCmd = new DestroyWallCmdElements();
		this.pBuildWallCmd = new BuildWallCmdElements();
		this.pLocation = new LocationElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pRepeateStatement = new RepeateStatementElements();
		this.pConditionModel = new ConditionModelElements();
		this.pOrCond = new OrCondElements();
		this.pAndCond = new AndCondElements();
		this.pNotCond = new NotCondElements();
		this.pBracketsCond = new BracketsCondElements();
		this.pCondition = new ConditionElements();
		this.pFull = new FullElements();
		this.pMark = new MarkElements();
		this.pWallAhead = new WallAheadElements();
		this.pHeading = new HeadingElements();
		this.pEInteger = new EIntegerElements();
		this.pEString = new EStringElements();
		this.tTRACESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.TRACESTRING");
		this.tCOMMENTSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.robodsl.RoboDsl.COMMENTSTRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.robodsl.RoboDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EScript:
	//	{EScript}
	//	'Script'
	//	Name=EString 'runs'
	//	'as'
	//	mainbody=MainBody 'end';
	public EScriptElements getEScriptAccess() {
		return pEScript;
	}
	
	public ParserRule getEScriptRule() {
		return getEScriptAccess().getRule();
	}
	
	//Command:
	//	EComment | IfStatement | WhileStatement | RepeateStatement | TurnLeftCmd | TraceCmd | DropCmd | StepCmd | PickCmd |
	//	DropMarkCmd | PickMarkCmd | DestroyWallCmd | BuildWallCmd;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//// | RoutineDecl | RoutineCall;
	//MainBody:
	//	{MainBody} (command+=Command command+=Command*);
	public MainBodyElements getMainBodyAccess() {
		return pMainBody;
	}
	
	public ParserRule getMainBodyRule() {
		return getMainBodyAccess().getRule();
	}
	
	//SubBody:
	//	{SubBody} command+=Command command+=Command*;
	public SubBodyElements getSubBodyAccess() {
		return pSubBody;
	}
	
	public ParserRule getSubBodyRule() {
		return getSubBodyAccess().getRule();
	}
	
	//EComment:
	//	{EComment} comment=COMMENTSTRING;
	public ECommentElements getECommentAccess() {
		return pEComment;
	}
	
	public ParserRule getECommentRule() {
		return getECommentAccess().getRule();
	}
	
	//TurnLeftCmd:
	//	{TurnLeftCmd}
	//	'turnLeft';
	public TurnLeftCmdElements getTurnLeftCmdAccess() {
		return pTurnLeftCmd;
	}
	
	public ParserRule getTurnLeftCmdRule() {
		return getTurnLeftCmdAccess().getRule();
	}
	
	//TraceCmd:
	//	{TraceCmd}
	//	'trace' trace=TRACESTRING;
	public TraceCmdElements getTraceCmdAccess() {
		return pTraceCmd;
	}
	
	public ParserRule getTraceCmdRule() {
		return getTraceCmdAccess().getRule();
	}
	
	//DropCmd:
	//	{DropCmd}
	//	'drop';
	public DropCmdElements getDropCmdAccess() {
		return pDropCmd;
	}
	
	public ParserRule getDropCmdRule() {
		return getDropCmdAccess().getRule();
	}
	
	//StepCmd:
	//	{StepCmd}
	//	'step';
	public StepCmdElements getStepCmdAccess() {
		return pStepCmd;
	}
	
	public ParserRule getStepCmdRule() {
		return getStepCmdAccess().getRule();
	}
	
	//PickCmd:
	//	{PickCmd}
	//	'pick';
	public PickCmdElements getPickCmdAccess() {
		return pPickCmd;
	}
	
	public ParserRule getPickCmdRule() {
		return getPickCmdAccess().getRule();
	}
	
	//DropMarkCmd:
	//	{DropMarkCmd}
	//	'dropMark'
	//	location=Location;
	public DropMarkCmdElements getDropMarkCmdAccess() {
		return pDropMarkCmd;
	}
	
	public ParserRule getDropMarkCmdRule() {
		return getDropMarkCmdAccess().getRule();
	}
	
	//PickMarkCmd:
	//	{PickMarkCmd}
	//	'pickMark'
	//	location=Location;
	public PickMarkCmdElements getPickMarkCmdAccess() {
		return pPickMarkCmd;
	}
	
	public ParserRule getPickMarkCmdRule() {
		return getPickMarkCmdAccess().getRule();
	}
	
	//DestroyWallCmd:
	//	{DestroyWallCmd}
	//	'destroyWall'
	//	location=Location;
	public DestroyWallCmdElements getDestroyWallCmdAccess() {
		return pDestroyWallCmd;
	}
	
	public ParserRule getDestroyWallCmdRule() {
		return getDestroyWallCmdAccess().getRule();
	}
	
	//BuildWallCmd:
	//	{BuildWallCmd}
	//	'buildWall'
	//	location=Location;
	public BuildWallCmdElements getBuildWallCmdAccess() {
		return pBuildWallCmd;
	}
	
	public ParserRule getBuildWallCmdRule() {
		return getBuildWallCmdAccess().getRule();
	}
	
	//Location:
	//	{Location}
	//	'row:' row=EInteger 'col:' col=EInteger;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//IfStatement:
	//	{IfStatement}
	//	'if'
	//	conditionmodel=ConditionModel
	//	'do'
	//	subbody=SubBody ('else' 'do' elsebody=SubBody)?
	//	'end';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	{WhileStatement}
	//	'while'
	//	conditionmodel=ConditionModel
	//	'do'
	//	subbody=SubBody
	//	'end';
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//RepeateStatement:
	//	{RepeateStatement}
	//	'Repeat'
	//	count=EInteger
	//	'times'
	//	subbody=SubBody
	//	'end';
	public RepeateStatementElements getRepeateStatementAccess() {
		return pRepeateStatement;
	}
	
	public ParserRule getRepeateStatementRule() {
		return getRepeateStatementAccess().getRule();
	}
	
	//ConditionModel:
	//	OrCond;
	public ConditionModelElements getConditionModelAccess() {
		return pConditionModel;
	}
	
	public ParserRule getConditionModelRule() {
		return getConditionModelAccess().getRule();
	}
	
	//OrCond:
	//	lhs=AndCond ('or' rhs=OrCond)?;
	public OrCondElements getOrCondAccess() {
		return pOrCond;
	}
	
	public ParserRule getOrCondRule() {
		return getOrCondAccess().getRule();
	}
	
	//AndCond:
	//	lhs=NotCond ('and' rhs=AndCond)?;
	public AndCondElements getAndCondAccess() {
		return pAndCond;
	}
	
	public ParserRule getAndCondRule() {
		return getAndCondAccess().getRule();
	}
	
	//NotCond:
	//	not?='not'? brackets=BracketsCond;
	public NotCondElements getNotCondAccess() {
		return pNotCond;
	}
	
	public ParserRule getNotCondRule() {
		return getNotCondAccess().getRule();
	}
	
	//BracketsCond:
	//	'(' orcond=OrCond ')' | condition=Condition;
	public BracketsCondElements getBracketsCondAccess() {
		return pBracketsCond;
	}
	
	public ParserRule getBracketsCondRule() {
		return getBracketsCondAccess().getRule();
	}
	
	//Condition:
	//	Full | Mark | WallAhead | Heading;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Full Condition:
	//	{Condition} 'full';
	public FullElements getFullAccess() {
		return pFull;
	}
	
	public ParserRule getFullRule() {
		return getFullAccess().getRule();
	}
	
	//Mark Condition:
	//	{Condition} 'mark';
	public MarkElements getMarkAccess() {
		return pMark;
	}
	
	public ParserRule getMarkRule() {
		return getMarkAccess().getRule();
	}
	
	//WallAhead Condition:
	//	{Condition} 'wall' 'ahead';
	public WallAheadElements getWallAheadAccess() {
		return pWallAhead;
	}
	
	public ParserRule getWallAheadRule() {
		return getWallAheadAccess().getRule();
	}
	
	//Heading Condition:
	//	{Condition} 'heading' ('north' | 'east' | 'south' | 'west');
	public HeadingElements getHeadingAccess() {
		return pHeading;
	}
	
	public ParserRule getHeadingRule() {
		return getHeadingAccess().getRule();
	}
	
	//EInteger ecore::EInt:
	//	INT;
	public EIntegerElements getEIntegerAccess() {
		return pEInteger;
	}
	
	public ParserRule getEIntegerRule() {
		return getEIntegerAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal TRACESTRING:
	//	'"' !'"'* '"';
	public TerminalRule getTRACESTRINGRule() {
		return tTRACESTRING;
	}
	
	//terminal COMMENTSTRING:
	//	'#' !'\n'* '\n';
	public TerminalRule getCOMMENTSTRINGRule() {
		return tCOMMENTSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
