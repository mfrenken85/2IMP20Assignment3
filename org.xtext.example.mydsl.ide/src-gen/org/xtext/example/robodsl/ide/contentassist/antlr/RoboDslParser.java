/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.robodsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.robodsl.ide.contentassist.antlr.internal.InternalRoboDslParser;
import org.xtext.example.robodsl.services.RoboDslGrammarAccess;

public class RoboDslParser extends AbstractContentAssistParser {

	@Inject
	private RoboDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRoboDslParser createParser() {
		InternalRoboDslParser result = new InternalRoboDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getBracketsCondAccess().getAlternatives(), "rule__BracketsCond__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getHeadingAccess().getAlternatives_2(), "rule__Heading__Alternatives_2");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEScriptAccess().getGroup(), "rule__EScript__Group__0");
					put(grammarAccess.getMainBodyAccess().getGroup(), "rule__MainBody__Group__0");
					put(grammarAccess.getMainBodyAccess().getGroup_1(), "rule__MainBody__Group_1__0");
					put(grammarAccess.getSubBodyAccess().getGroup(), "rule__SubBody__Group__0");
					put(grammarAccess.getECommentAccess().getGroup(), "rule__EComment__Group__0");
					put(grammarAccess.getTurnLeftCmdAccess().getGroup(), "rule__TurnLeftCmd__Group__0");
					put(grammarAccess.getTraceCmdAccess().getGroup(), "rule__TraceCmd__Group__0");
					put(grammarAccess.getDropCmdAccess().getGroup(), "rule__DropCmd__Group__0");
					put(grammarAccess.getStepCmdAccess().getGroup(), "rule__StepCmd__Group__0");
					put(grammarAccess.getPickCmdAccess().getGroup(), "rule__PickCmd__Group__0");
					put(grammarAccess.getDropMarkCmdAccess().getGroup(), "rule__DropMarkCmd__Group__0");
					put(grammarAccess.getPickMarkCmdAccess().getGroup(), "rule__PickMarkCmd__Group__0");
					put(grammarAccess.getDestroyWallCmdAccess().getGroup(), "rule__DestroyWallCmd__Group__0");
					put(grammarAccess.getBuildWallCmdAccess().getGroup(), "rule__BuildWallCmd__Group__0");
					put(grammarAccess.getLocationAccess().getGroup(), "rule__Location__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getRepeateStatementAccess().getGroup(), "rule__RepeateStatement__Group__0");
					put(grammarAccess.getOrCondAccess().getGroup(), "rule__OrCond__Group__0");
					put(grammarAccess.getOrCondAccess().getGroup_1(), "rule__OrCond__Group_1__0");
					put(grammarAccess.getAndCondAccess().getGroup(), "rule__AndCond__Group__0");
					put(grammarAccess.getAndCondAccess().getGroup_1(), "rule__AndCond__Group_1__0");
					put(grammarAccess.getNotCondAccess().getGroup(), "rule__NotCond__Group__0");
					put(grammarAccess.getBracketsCondAccess().getGroup_0(), "rule__BracketsCond__Group_0__0");
					put(grammarAccess.getFullAccess().getGroup(), "rule__Full__Group__0");
					put(grammarAccess.getMarkAccess().getGroup(), "rule__Mark__Group__0");
					put(grammarAccess.getWallAheadAccess().getGroup(), "rule__WallAhead__Group__0");
					put(grammarAccess.getHeadingAccess().getGroup(), "rule__Heading__Group__0");
					put(grammarAccess.getEScriptAccess().getNameAssignment_2(), "rule__EScript__NameAssignment_2");
					put(grammarAccess.getEScriptAccess().getMainbodyAssignment_5(), "rule__EScript__MainbodyAssignment_5");
					put(grammarAccess.getMainBodyAccess().getCommandAssignment_1_0(), "rule__MainBody__CommandAssignment_1_0");
					put(grammarAccess.getMainBodyAccess().getCommandAssignment_1_1(), "rule__MainBody__CommandAssignment_1_1");
					put(grammarAccess.getSubBodyAccess().getCommandAssignment_1(), "rule__SubBody__CommandAssignment_1");
					put(grammarAccess.getSubBodyAccess().getCommandAssignment_2(), "rule__SubBody__CommandAssignment_2");
					put(grammarAccess.getECommentAccess().getCommentAssignment_1(), "rule__EComment__CommentAssignment_1");
					put(grammarAccess.getTraceCmdAccess().getTraceAssignment_2(), "rule__TraceCmd__TraceAssignment_2");
					put(grammarAccess.getDropMarkCmdAccess().getLocationAssignment_2(), "rule__DropMarkCmd__LocationAssignment_2");
					put(grammarAccess.getPickMarkCmdAccess().getLocationAssignment_2(), "rule__PickMarkCmd__LocationAssignment_2");
					put(grammarAccess.getDestroyWallCmdAccess().getLocationAssignment_2(), "rule__DestroyWallCmd__LocationAssignment_2");
					put(grammarAccess.getBuildWallCmdAccess().getLocationAssignment_2(), "rule__BuildWallCmd__LocationAssignment_2");
					put(grammarAccess.getLocationAccess().getRowAssignment_2(), "rule__Location__RowAssignment_2");
					put(grammarAccess.getLocationAccess().getColAssignment_4(), "rule__Location__ColAssignment_4");
					put(grammarAccess.getIfStatementAccess().getConditionmodelAssignment_2(), "rule__IfStatement__ConditionmodelAssignment_2");
					put(grammarAccess.getIfStatementAccess().getSubbodyAssignment_4(), "rule__IfStatement__SubbodyAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElsebodyAssignment_5_2(), "rule__IfStatement__ElsebodyAssignment_5_2");
					put(grammarAccess.getWhileStatementAccess().getConditionmodelAssignment_2(), "rule__WhileStatement__ConditionmodelAssignment_2");
					put(grammarAccess.getWhileStatementAccess().getSubbodyAssignment_4(), "rule__WhileStatement__SubbodyAssignment_4");
					put(grammarAccess.getRepeateStatementAccess().getCountAssignment_2(), "rule__RepeateStatement__CountAssignment_2");
					put(grammarAccess.getRepeateStatementAccess().getSubbodyAssignment_4(), "rule__RepeateStatement__SubbodyAssignment_4");
					put(grammarAccess.getOrCondAccess().getLhsAssignment_0(), "rule__OrCond__LhsAssignment_0");
					put(grammarAccess.getOrCondAccess().getRhsAssignment_1_1(), "rule__OrCond__RhsAssignment_1_1");
					put(grammarAccess.getAndCondAccess().getLhsAssignment_0(), "rule__AndCond__LhsAssignment_0");
					put(grammarAccess.getAndCondAccess().getRhsAssignment_1_1(), "rule__AndCond__RhsAssignment_1_1");
					put(grammarAccess.getNotCondAccess().getNotAssignment_0(), "rule__NotCond__NotAssignment_0");
					put(grammarAccess.getNotCondAccess().getBracketsAssignment_1(), "rule__NotCond__BracketsAssignment_1");
					put(grammarAccess.getBracketsCondAccess().getOrcondAssignment_0_1(), "rule__BracketsCond__OrcondAssignment_0_1");
					put(grammarAccess.getBracketsCondAccess().getConditionAssignment_1(), "rule__BracketsCond__ConditionAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RoboDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RoboDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
