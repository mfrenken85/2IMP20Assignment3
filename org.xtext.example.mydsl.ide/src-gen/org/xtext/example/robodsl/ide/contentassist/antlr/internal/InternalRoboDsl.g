/*
 * generated by Xtext 2.11.0
 */
grammar InternalRoboDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.robodsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.robodsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.robodsl.services.RoboDslGrammarAccess;

}
@parser::members {
	private RoboDslGrammarAccess grammarAccess;

	public void setGrammarAccess(RoboDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEScript
entryRuleEScript
:
{ before(grammarAccess.getEScriptRule()); }
	 ruleEScript
{ after(grammarAccess.getEScriptRule()); } 
	 EOF 
;

// Rule EScript
ruleEScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEScriptAccess().getGroup()); }
		(rule__EScript__Group__0)
		{ after(grammarAccess.getEScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainBody
entryRuleMainBody
:
{ before(grammarAccess.getMainBodyRule()); }
	 ruleMainBody
{ after(grammarAccess.getMainBodyRule()); } 
	 EOF 
;

// Rule MainBody
ruleMainBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainBodyAccess().getGroup()); }
		(rule__MainBody__Group__0)
		{ after(grammarAccess.getMainBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubBody
entryRuleSubBody
:
{ before(grammarAccess.getSubBodyRule()); }
	 ruleSubBody
{ after(grammarAccess.getSubBodyRule()); } 
	 EOF 
;

// Rule SubBody
ruleSubBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubBodyAccess().getGroup()); }
		(rule__SubBody__Group__0)
		{ after(grammarAccess.getSubBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEComment
entryRuleEComment
:
{ before(grammarAccess.getECommentRule()); }
	 ruleEComment
{ after(grammarAccess.getECommentRule()); } 
	 EOF 
;

// Rule EComment
ruleEComment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getECommentAccess().getGroup()); }
		(rule__EComment__Group__0)
		{ after(grammarAccess.getECommentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnLeftCmd
entryRuleTurnLeftCmd
:
{ before(grammarAccess.getTurnLeftCmdRule()); }
	 ruleTurnLeftCmd
{ after(grammarAccess.getTurnLeftCmdRule()); } 
	 EOF 
;

// Rule TurnLeftCmd
ruleTurnLeftCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnLeftCmdAccess().getGroup()); }
		(rule__TurnLeftCmd__Group__0)
		{ after(grammarAccess.getTurnLeftCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTraceCmd
entryRuleTraceCmd
:
{ before(grammarAccess.getTraceCmdRule()); }
	 ruleTraceCmd
{ after(grammarAccess.getTraceCmdRule()); } 
	 EOF 
;

// Rule TraceCmd
ruleTraceCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceCmdAccess().getGroup()); }
		(rule__TraceCmd__Group__0)
		{ after(grammarAccess.getTraceCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropCmd
entryRuleDropCmd
:
{ before(grammarAccess.getDropCmdRule()); }
	 ruleDropCmd
{ after(grammarAccess.getDropCmdRule()); } 
	 EOF 
;

// Rule DropCmd
ruleDropCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropCmdAccess().getGroup()); }
		(rule__DropCmd__Group__0)
		{ after(grammarAccess.getDropCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStepCmd
entryRuleStepCmd
:
{ before(grammarAccess.getStepCmdRule()); }
	 ruleStepCmd
{ after(grammarAccess.getStepCmdRule()); } 
	 EOF 
;

// Rule StepCmd
ruleStepCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepCmdAccess().getGroup()); }
		(rule__StepCmd__Group__0)
		{ after(grammarAccess.getStepCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePickCmd
entryRulePickCmd
:
{ before(grammarAccess.getPickCmdRule()); }
	 rulePickCmd
{ after(grammarAccess.getPickCmdRule()); } 
	 EOF 
;

// Rule PickCmd
rulePickCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickCmdAccess().getGroup()); }
		(rule__PickCmd__Group__0)
		{ after(grammarAccess.getPickCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDropMarkCmd
entryRuleDropMarkCmd
:
{ before(grammarAccess.getDropMarkCmdRule()); }
	 ruleDropMarkCmd
{ after(grammarAccess.getDropMarkCmdRule()); } 
	 EOF 
;

// Rule DropMarkCmd
ruleDropMarkCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropMarkCmdAccess().getGroup()); }
		(rule__DropMarkCmd__Group__0)
		{ after(grammarAccess.getDropMarkCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePickMarkCmd
entryRulePickMarkCmd
:
{ before(grammarAccess.getPickMarkCmdRule()); }
	 rulePickMarkCmd
{ after(grammarAccess.getPickMarkCmdRule()); } 
	 EOF 
;

// Rule PickMarkCmd
rulePickMarkCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickMarkCmdAccess().getGroup()); }
		(rule__PickMarkCmd__Group__0)
		{ after(grammarAccess.getPickMarkCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDestroyWallCmd
entryRuleDestroyWallCmd
:
{ before(grammarAccess.getDestroyWallCmdRule()); }
	 ruleDestroyWallCmd
{ after(grammarAccess.getDestroyWallCmdRule()); } 
	 EOF 
;

// Rule DestroyWallCmd
ruleDestroyWallCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDestroyWallCmdAccess().getGroup()); }
		(rule__DestroyWallCmd__Group__0)
		{ after(grammarAccess.getDestroyWallCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBuildWallCmd
entryRuleBuildWallCmd
:
{ before(grammarAccess.getBuildWallCmdRule()); }
	 ruleBuildWallCmd
{ after(grammarAccess.getBuildWallCmdRule()); } 
	 EOF 
;

// Rule BuildWallCmd
ruleBuildWallCmd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuildWallCmdAccess().getGroup()); }
		(rule__BuildWallCmd__Group__0)
		{ after(grammarAccess.getBuildWallCmdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocation
entryRuleLocation
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocationAccess().getGroup()); }
		(rule__Location__Group__0)
		{ after(grammarAccess.getLocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeateStatement
entryRuleRepeateStatement
:
{ before(grammarAccess.getRepeateStatementRule()); }
	 ruleRepeateStatement
{ after(grammarAccess.getRepeateStatementRule()); } 
	 EOF 
;

// Rule RepeateStatement
ruleRepeateStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeateStatementAccess().getGroup()); }
		(rule__RepeateStatement__Group__0)
		{ after(grammarAccess.getRepeateStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionModel
entryRuleConditionModel
:
{ before(grammarAccess.getConditionModelRule()); }
	 ruleConditionModel
{ after(grammarAccess.getConditionModelRule()); } 
	 EOF 
;

// Rule ConditionModel
ruleConditionModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionModelAccess().getOrCondParserRuleCall()); }
		ruleOrCond
		{ after(grammarAccess.getConditionModelAccess().getOrCondParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrCond
entryRuleOrCond
:
{ before(grammarAccess.getOrCondRule()); }
	 ruleOrCond
{ after(grammarAccess.getOrCondRule()); } 
	 EOF 
;

// Rule OrCond
ruleOrCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrCondAccess().getGroup()); }
		(rule__OrCond__Group__0)
		{ after(grammarAccess.getOrCondAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndCond
entryRuleAndCond
:
{ before(grammarAccess.getAndCondRule()); }
	 ruleAndCond
{ after(grammarAccess.getAndCondRule()); } 
	 EOF 
;

// Rule AndCond
ruleAndCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndCondAccess().getGroup()); }
		(rule__AndCond__Group__0)
		{ after(grammarAccess.getAndCondAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotCond
entryRuleNotCond
:
{ before(grammarAccess.getNotCondRule()); }
	 ruleNotCond
{ after(grammarAccess.getNotCondRule()); } 
	 EOF 
;

// Rule NotCond
ruleNotCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotCondAccess().getGroup()); }
		(rule__NotCond__Group__0)
		{ after(grammarAccess.getNotCondAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBracketsCond
entryRuleBracketsCond
:
{ before(grammarAccess.getBracketsCondRule()); }
	 ruleBracketsCond
{ after(grammarAccess.getBracketsCondRule()); } 
	 EOF 
;

// Rule BracketsCond
ruleBracketsCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBracketsCondAccess().getAlternatives()); }
		(rule__BracketsCond__Alternatives)
		{ after(grammarAccess.getBracketsCondAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFull
entryRuleFull
:
{ before(grammarAccess.getFullRule()); }
	 ruleFull
{ after(grammarAccess.getFullRule()); } 
	 EOF 
;

// Rule Full
ruleFull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullAccess().getGroup()); }
		(rule__Full__Group__0)
		{ after(grammarAccess.getFullAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMark
entryRuleMark
:
{ before(grammarAccess.getMarkRule()); }
	 ruleMark
{ after(grammarAccess.getMarkRule()); } 
	 EOF 
;

// Rule Mark
ruleMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkAccess().getGroup()); }
		(rule__Mark__Group__0)
		{ after(grammarAccess.getMarkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWallAhead
entryRuleWallAhead
:
{ before(grammarAccess.getWallAheadRule()); }
	 ruleWallAhead
{ after(grammarAccess.getWallAheadRule()); } 
	 EOF 
;

// Rule WallAhead
ruleWallAhead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWallAheadAccess().getGroup()); }
		(rule__WallAhead__Group__0)
		{ after(grammarAccess.getWallAheadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeading
entryRuleHeading
:
{ before(grammarAccess.getHeadingRule()); }
	 ruleHeading
{ after(grammarAccess.getHeadingRule()); } 
	 EOF 
;

// Rule Heading
ruleHeading 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadingAccess().getGroup()); }
		(rule__Heading__Group__0)
		{ after(grammarAccess.getHeadingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInteger
entryRuleEInteger
:
{ before(grammarAccess.getEIntegerRule()); }
	 ruleEInteger
{ after(grammarAccess.getEIntegerRule()); } 
	 EOF 
;

// Rule EInteger
ruleEInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntegerAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getEIntegerAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getECommentParserRuleCall_0()); }
		ruleEComment
		{ after(grammarAccess.getCommandAccess().getECommentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getIfStatementParserRuleCall_1()); }
		ruleIfStatement
		{ after(grammarAccess.getCommandAccess().getIfStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getWhileStatementParserRuleCall_2()); }
		ruleWhileStatement
		{ after(grammarAccess.getCommandAccess().getWhileStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRepeateStatementParserRuleCall_3()); }
		ruleRepeateStatement
		{ after(grammarAccess.getCommandAccess().getRepeateStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getTurnLeftCmdParserRuleCall_4()); }
		ruleTurnLeftCmd
		{ after(grammarAccess.getCommandAccess().getTurnLeftCmdParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getTraceCmdParserRuleCall_5()); }
		ruleTraceCmd
		{ after(grammarAccess.getCommandAccess().getTraceCmdParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropCmdParserRuleCall_6()); }
		ruleDropCmd
		{ after(grammarAccess.getCommandAccess().getDropCmdParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getStepCmdParserRuleCall_7()); }
		ruleStepCmd
		{ after(grammarAccess.getCommandAccess().getStepCmdParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getPickCmdParserRuleCall_8()); }
		rulePickCmd
		{ after(grammarAccess.getCommandAccess().getPickCmdParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDropMarkCmdParserRuleCall_9()); }
		ruleDropMarkCmd
		{ after(grammarAccess.getCommandAccess().getDropMarkCmdParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getPickMarkCmdParserRuleCall_10()); }
		rulePickMarkCmd
		{ after(grammarAccess.getCommandAccess().getPickMarkCmdParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDestroyWallCmdParserRuleCall_11()); }
		ruleDestroyWallCmd
		{ after(grammarAccess.getCommandAccess().getDestroyWallCmdParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getBuildWallCmdParserRuleCall_12()); }
		ruleBuildWallCmd
		{ after(grammarAccess.getCommandAccess().getBuildWallCmdParserRuleCall_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketsCondAccess().getGroup_0()); }
		(rule__BracketsCond__Group_0__0)
		{ after(grammarAccess.getBracketsCondAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBracketsCondAccess().getConditionAssignment_1()); }
		(rule__BracketsCond__ConditionAssignment_1)
		{ after(grammarAccess.getBracketsCondAccess().getConditionAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getFullParserRuleCall_0()); }
		ruleFull
		{ after(grammarAccess.getConditionAccess().getFullParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getMarkParserRuleCall_1()); }
		ruleMark
		{ after(grammarAccess.getConditionAccess().getMarkParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getWallAheadParserRuleCall_2()); }
		ruleWallAhead
		{ after(grammarAccess.getConditionAccess().getWallAheadParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getHeadingParserRuleCall_3()); }
		ruleHeading
		{ after(grammarAccess.getConditionAccess().getHeadingParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadingAccess().getNorthKeyword_2_0()); }
		'north'
		{ after(grammarAccess.getHeadingAccess().getNorthKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeadingAccess().getEastKeyword_2_1()); }
		'east'
		{ after(grammarAccess.getHeadingAccess().getEastKeyword_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getHeadingAccess().getSouthKeyword_2_2()); }
		'south'
		{ after(grammarAccess.getHeadingAccess().getSouthKeyword_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getHeadingAccess().getWestKeyword_2_3()); }
		'west'
		{ after(grammarAccess.getHeadingAccess().getWestKeyword_2_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__0__Impl
	rule__EScript__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getEScriptAction_0()); }
	()
	{ after(grammarAccess.getEScriptAccess().getEScriptAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__1__Impl
	rule__EScript__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getScriptKeyword_1()); }
	'Script'
	{ after(grammarAccess.getEScriptAccess().getScriptKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__2__Impl
	rule__EScript__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getNameAssignment_2()); }
	(rule__EScript__NameAssignment_2)
	{ after(grammarAccess.getEScriptAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__3__Impl
	rule__EScript__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getRunsKeyword_3()); }
	'runs'
	{ after(grammarAccess.getEScriptAccess().getRunsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__4__Impl
	rule__EScript__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getAsKeyword_4()); }
	'as'
	{ after(grammarAccess.getEScriptAccess().getAsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__5__Impl
	rule__EScript__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getMainbodyAssignment_5()); }
	(rule__EScript__MainbodyAssignment_5)
	{ after(grammarAccess.getEScriptAccess().getMainbodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EScript__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEScriptAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getEScriptAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainBody__Group__0__Impl
	rule__MainBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainBodyAccess().getMainBodyAction_0()); }
	()
	{ after(grammarAccess.getMainBodyAccess().getMainBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainBody__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainBodyAccess().getGroup_1()); }
	(rule__MainBody__Group_1__0)
	{ after(grammarAccess.getMainBodyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainBody__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainBody__Group_1__0__Impl
	rule__MainBody__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainBodyAccess().getCommandAssignment_1_0()); }
	(rule__MainBody__CommandAssignment_1_0)
	{ after(grammarAccess.getMainBodyAccess().getCommandAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainBody__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainBodyAccess().getCommandAssignment_1_1()); }
	(rule__MainBody__CommandAssignment_1_1)*
	{ after(grammarAccess.getMainBodyAccess().getCommandAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubBody__Group__0__Impl
	rule__SubBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubBodyAccess().getSubBodyAction_0()); }
	()
	{ after(grammarAccess.getSubBodyAccess().getSubBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubBody__Group__1__Impl
	rule__SubBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubBodyAccess().getCommandAssignment_1()); }
	(rule__SubBody__CommandAssignment_1)
	{ after(grammarAccess.getSubBodyAccess().getCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubBody__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubBodyAccess().getCommandAssignment_2()); }
	(rule__SubBody__CommandAssignment_2)*
	{ after(grammarAccess.getSubBodyAccess().getCommandAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EComment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EComment__Group__0__Impl
	rule__EComment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EComment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getECommentAccess().getECommentAction_0()); }
	()
	{ after(grammarAccess.getECommentAccess().getECommentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EComment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EComment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EComment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getECommentAccess().getCommentAssignment_1()); }
	(rule__EComment__CommentAssignment_1)
	{ after(grammarAccess.getECommentAccess().getCommentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnLeftCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeftCmd__Group__0__Impl
	rule__TurnLeftCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeftCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftCmdAccess().getTurnLeftCmdAction_0()); }
	()
	{ after(grammarAccess.getTurnLeftCmdAccess().getTurnLeftCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeftCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnLeftCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnLeftCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnLeftCmdAccess().getTurnLeftKeyword_1()); }
	'turnLeft'
	{ after(grammarAccess.getTurnLeftCmdAccess().getTurnLeftKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraceCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceCmd__Group__0__Impl
	rule__TraceCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceCmdAccess().getTraceCmdAction_0()); }
	()
	{ after(grammarAccess.getTraceCmdAccess().getTraceCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceCmd__Group__1__Impl
	rule__TraceCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceCmdAccess().getTraceKeyword_1()); }
	'trace'
	{ after(grammarAccess.getTraceCmdAccess().getTraceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceCmd__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceCmdAccess().getTraceAssignment_2()); }
	(rule__TraceCmd__TraceAssignment_2)
	{ after(grammarAccess.getTraceCmdAccess().getTraceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropCmd__Group__0__Impl
	rule__DropCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropCmdAccess().getDropCmdAction_0()); }
	()
	{ after(grammarAccess.getDropCmdAccess().getDropCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropCmdAccess().getDropKeyword_1()); }
	'drop'
	{ after(grammarAccess.getDropCmdAccess().getDropKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StepCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepCmd__Group__0__Impl
	rule__StepCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepCmdAccess().getStepCmdAction_0()); }
	()
	{ after(grammarAccess.getStepCmdAccess().getStepCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StepCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StepCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepCmdAccess().getStepKeyword_1()); }
	'step'
	{ after(grammarAccess.getStepCmdAccess().getStepKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PickCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickCmd__Group__0__Impl
	rule__PickCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PickCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickCmdAccess().getPickCmdAction_0()); }
	()
	{ after(grammarAccess.getPickCmdAccess().getPickCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickCmd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PickCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickCmdAccess().getPickKeyword_1()); }
	'pick'
	{ after(grammarAccess.getPickCmdAccess().getPickKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DropMarkCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMarkCmd__Group__0__Impl
	rule__DropMarkCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkCmdAccess().getDropMarkCmdAction_0()); }
	()
	{ after(grammarAccess.getDropMarkCmdAccess().getDropMarkCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMarkCmd__Group__1__Impl
	rule__DropMarkCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkCmdAccess().getDropMarkKeyword_1()); }
	'dropMark'
	{ after(grammarAccess.getDropMarkCmdAccess().getDropMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DropMarkCmd__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropMarkCmdAccess().getLocationAssignment_2()); }
	(rule__DropMarkCmd__LocationAssignment_2)
	{ after(grammarAccess.getDropMarkCmdAccess().getLocationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PickMarkCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMarkCmd__Group__0__Impl
	rule__PickMarkCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkCmdAccess().getPickMarkCmdAction_0()); }
	()
	{ after(grammarAccess.getPickMarkCmdAccess().getPickMarkCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMarkCmd__Group__1__Impl
	rule__PickMarkCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkCmdAccess().getPickMarkKeyword_1()); }
	'pickMark'
	{ after(grammarAccess.getPickMarkCmdAccess().getPickMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickMarkCmd__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickMarkCmdAccess().getLocationAssignment_2()); }
	(rule__PickMarkCmd__LocationAssignment_2)
	{ after(grammarAccess.getPickMarkCmdAccess().getLocationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DestroyWallCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWallCmd__Group__0__Impl
	rule__DestroyWallCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallCmdAccess().getDestroyWallCmdAction_0()); }
	()
	{ after(grammarAccess.getDestroyWallCmdAccess().getDestroyWallCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWallCmd__Group__1__Impl
	rule__DestroyWallCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallCmdAccess().getDestroyWallKeyword_1()); }
	'destroyWall'
	{ after(grammarAccess.getDestroyWallCmdAccess().getDestroyWallKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DestroyWallCmd__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDestroyWallCmdAccess().getLocationAssignment_2()); }
	(rule__DestroyWallCmd__LocationAssignment_2)
	{ after(grammarAccess.getDestroyWallCmdAccess().getLocationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BuildWallCmd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWallCmd__Group__0__Impl
	rule__BuildWallCmd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallCmdAccess().getBuildWallCmdAction_0()); }
	()
	{ after(grammarAccess.getBuildWallCmdAccess().getBuildWallCmdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWallCmd__Group__1__Impl
	rule__BuildWallCmd__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallCmdAccess().getBuildWallKeyword_1()); }
	'buildWall'
	{ after(grammarAccess.getBuildWallCmdAccess().getBuildWallKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BuildWallCmd__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBuildWallCmdAccess().getLocationAssignment_2()); }
	(rule__BuildWallCmd__LocationAssignment_2)
	{ after(grammarAccess.getBuildWallCmdAccess().getLocationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Location__Group__0__Impl
	rule__Location__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationAccess().getLocationAction_0()); }
	()
	{ after(grammarAccess.getLocationAccess().getLocationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Location__Group__1__Impl
	rule__Location__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationAccess().getRowKeyword_1()); }
	'row:'
	{ after(grammarAccess.getLocationAccess().getRowKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Location__Group__2__Impl
	rule__Location__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationAccess().getRowAssignment_2()); }
	(rule__Location__RowAssignment_2)
	{ after(grammarAccess.getLocationAccess().getRowAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Location__Group__3__Impl
	rule__Location__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationAccess().getColKeyword_3()); }
	'col:'
	{ after(grammarAccess.getLocationAccess().getColKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Location__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocationAccess().getColAssignment_4()); }
	(rule__Location__ColAssignment_4)
	{ after(grammarAccess.getLocationAccess().getColAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
	()
	{ after(grammarAccess.getIfStatementAccess().getIfStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionmodelAssignment_2()); }
	(rule__IfStatement__ConditionmodelAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getConditionmodelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getIfStatementAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getSubbodyAssignment_4()); }
	(rule__IfStatement__SubbodyAssignment_4)
	{ after(grammarAccess.getIfStatementAccess().getSubbodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
	(rule__IfStatement__Group_5__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getIfStatementAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__1__Impl
	rule__IfStatement__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getDoKeyword_5_1()); }
	'do'
	{ after(grammarAccess.getIfStatementAccess().getDoKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getElsebodyAssignment_5_2()); }
	(rule__IfStatement__ElsebodyAssignment_5_2)
	{ after(grammarAccess.getIfStatementAccess().getElsebodyAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
	()
	{ after(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
	'while'
	{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getConditionmodelAssignment_2()); }
	(rule__WhileStatement__ConditionmodelAssignment_2)
	{ after(grammarAccess.getWhileStatementAccess().getConditionmodelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getDoKeyword_3()); }
	'do'
	{ after(grammarAccess.getWhileStatementAccess().getDoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
	rule__WhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getSubbodyAssignment_4()); }
	(rule__WhileStatement__SubbodyAssignment_4)
	{ after(grammarAccess.getWhileStatementAccess().getSubbodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getWhileStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeateStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__0__Impl
	rule__RepeateStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getRepeateStatementAction_0()); }
	()
	{ after(grammarAccess.getRepeateStatementAccess().getRepeateStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__1__Impl
	rule__RepeateStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getRepeatKeyword_1()); }
	'Repeat'
	{ after(grammarAccess.getRepeateStatementAccess().getRepeatKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__2__Impl
	rule__RepeateStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getCountAssignment_2()); }
	(rule__RepeateStatement__CountAssignment_2)
	{ after(grammarAccess.getRepeateStatementAccess().getCountAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__3__Impl
	rule__RepeateStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getTimesKeyword_3()); }
	'times'
	{ after(grammarAccess.getRepeateStatementAccess().getTimesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__4__Impl
	rule__RepeateStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getSubbodyAssignment_4()); }
	(rule__RepeateStatement__SubbodyAssignment_4)
	{ after(grammarAccess.getRepeateStatementAccess().getSubbodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeateStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeateStatementAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getRepeateStatementAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCond__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCond__Group__0__Impl
	rule__OrCond__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrCondAccess().getLhsAssignment_0()); }
	(rule__OrCond__LhsAssignment_0)
	{ after(grammarAccess.getOrCondAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCond__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrCondAccess().getGroup_1()); }
	(rule__OrCond__Group_1__0)?
	{ after(grammarAccess.getOrCondAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCond__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCond__Group_1__0__Impl
	rule__OrCond__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrCondAccess().getOrKeyword_1_0()); }
	'or'
	{ after(grammarAccess.getOrCondAccess().getOrKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCond__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrCondAccess().getRhsAssignment_1_1()); }
	(rule__OrCond__RhsAssignment_1_1)
	{ after(grammarAccess.getOrCondAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCond__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCond__Group__0__Impl
	rule__AndCond__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndCondAccess().getLhsAssignment_0()); }
	(rule__AndCond__LhsAssignment_0)
	{ after(grammarAccess.getAndCondAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCond__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndCondAccess().getGroup_1()); }
	(rule__AndCond__Group_1__0)?
	{ after(grammarAccess.getAndCondAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCond__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCond__Group_1__0__Impl
	rule__AndCond__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndCondAccess().getAndKeyword_1_0()); }
	'and'
	{ after(grammarAccess.getAndCondAccess().getAndKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCond__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndCondAccess().getRhsAssignment_1_1()); }
	(rule__AndCond__RhsAssignment_1_1)
	{ after(grammarAccess.getAndCondAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotCond__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotCond__Group__0__Impl
	rule__NotCond__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotCond__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotCondAccess().getNotAssignment_0()); }
	(rule__NotCond__NotAssignment_0)?
	{ after(grammarAccess.getNotCondAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotCond__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotCond__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotCond__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotCondAccess().getBracketsAssignment_1()); }
	(rule__NotCond__BracketsAssignment_1)
	{ after(grammarAccess.getNotCondAccess().getBracketsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BracketsCond__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketsCond__Group_0__0__Impl
	rule__BracketsCond__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketsCondAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getBracketsCondAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketsCond__Group_0__1__Impl
	rule__BracketsCond__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketsCondAccess().getOrcondAssignment_0_1()); }
	(rule__BracketsCond__OrcondAssignment_0_1)
	{ after(grammarAccess.getBracketsCondAccess().getOrcondAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BracketsCond__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketsCondAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getBracketsCondAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Full__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Full__Group__0__Impl
	rule__Full__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getFullAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Full__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Full__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullAccess().getFullKeyword_1()); }
	'full'
	{ after(grammarAccess.getFullAccess().getFullKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mark__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__0__Impl
	rule__Mark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getMarkAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getMarkKeyword_1()); }
	'mark'
	{ after(grammarAccess.getMarkAccess().getMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WallAhead__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__0__Impl
	rule__WallAhead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getWallAheadAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__1__Impl
	rule__WallAhead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getWallKeyword_1()); }
	'wall'
	{ after(grammarAccess.getWallAheadAccess().getWallKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WallAhead__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WallAhead__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallAheadAccess().getAheadKeyword_2()); }
	'ahead'
	{ after(grammarAccess.getWallAheadAccess().getAheadKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Heading__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__0__Impl
	rule__Heading__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getHeadingAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__1__Impl
	rule__Heading__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getHeadingKeyword_1()); }
	'heading'
	{ after(grammarAccess.getHeadingAccess().getHeadingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Heading__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Heading__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadingAccess().getAlternatives_2()); }
	(rule__Heading__Alternatives_2)
	{ after(grammarAccess.getHeadingAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EScript__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEScriptAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getEScriptAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EScript__MainbodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEScriptAccess().getMainbodyMainBodyParserRuleCall_5_0()); }
		ruleMainBody
		{ after(grammarAccess.getEScriptAccess().getMainbodyMainBodyParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__CommandAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainBodyAccess().getCommandCommandParserRuleCall_1_0_0()); }
		ruleCommand
		{ after(grammarAccess.getMainBodyAccess().getCommandCommandParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainBody__CommandAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainBodyAccess().getCommandCommandParserRuleCall_1_1_0()); }
		ruleCommand
		{ after(grammarAccess.getMainBodyAccess().getCommandCommandParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubBodyAccess().getCommandCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getSubBodyAccess().getCommandCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubBody__CommandAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubBodyAccess().getCommandCommandParserRuleCall_2_0()); }
		ruleCommand
		{ after(grammarAccess.getSubBodyAccess().getCommandCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EComment__CommentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getECommentAccess().getCommentCOMMENTSTRINGTerminalRuleCall_1_0()); }
		RULE_COMMENTSTRING
		{ after(grammarAccess.getECommentAccess().getCommentCOMMENTSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceCmd__TraceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceCmdAccess().getTraceTRACESTRINGTerminalRuleCall_2_0()); }
		RULE_TRACESTRING
		{ after(grammarAccess.getTraceCmdAccess().getTraceTRACESTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DropMarkCmd__LocationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropMarkCmdAccess().getLocationLocationParserRuleCall_2_0()); }
		ruleLocation
		{ after(grammarAccess.getDropMarkCmdAccess().getLocationLocationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickMarkCmd__LocationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickMarkCmdAccess().getLocationLocationParserRuleCall_2_0()); }
		ruleLocation
		{ after(grammarAccess.getPickMarkCmdAccess().getLocationLocationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DestroyWallCmd__LocationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDestroyWallCmdAccess().getLocationLocationParserRuleCall_2_0()); }
		ruleLocation
		{ after(grammarAccess.getDestroyWallCmdAccess().getLocationLocationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuildWallCmd__LocationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuildWallCmdAccess().getLocationLocationParserRuleCall_2_0()); }
		ruleLocation
		{ after(grammarAccess.getBuildWallCmdAccess().getLocationLocationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__RowAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocationAccess().getRowEIntegerParserRuleCall_2_0()); }
		ruleEInteger
		{ after(grammarAccess.getLocationAccess().getRowEIntegerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__ColAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocationAccess().getColEIntegerParserRuleCall_4_0()); }
		ruleEInteger
		{ after(grammarAccess.getLocationAccess().getColEIntegerParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionmodelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionmodelConditionModelParserRuleCall_2_0()); }
		ruleConditionModel
		{ after(grammarAccess.getIfStatementAccess().getConditionmodelConditionModelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__SubbodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
		ruleSubBody
		{ after(grammarAccess.getIfStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElsebodyAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElsebodySubBodyParserRuleCall_5_2_0()); }
		ruleSubBody
		{ after(grammarAccess.getIfStatementAccess().getElsebodySubBodyParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionmodelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getConditionmodelConditionModelParserRuleCall_2_0()); }
		ruleConditionModel
		{ after(grammarAccess.getWhileStatementAccess().getConditionmodelConditionModelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__SubbodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
		ruleSubBody
		{ after(grammarAccess.getWhileStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__CountAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeateStatementAccess().getCountEIntegerParserRuleCall_2_0()); }
		ruleEInteger
		{ after(grammarAccess.getRepeateStatementAccess().getCountEIntegerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeateStatement__SubbodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeateStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
		ruleSubBody
		{ after(grammarAccess.getRepeateStatementAccess().getSubbodySubBodyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrCondAccess().getLhsAndCondParserRuleCall_0_0()); }
		ruleAndCond
		{ after(grammarAccess.getOrCondAccess().getLhsAndCondParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCond__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrCondAccess().getRhsOrCondParserRuleCall_1_1_0()); }
		ruleOrCond
		{ after(grammarAccess.getOrCondAccess().getRhsOrCondParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndCondAccess().getLhsNotCondParserRuleCall_0_0()); }
		ruleNotCond
		{ after(grammarAccess.getAndCondAccess().getLhsNotCondParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCond__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndCondAccess().getRhsAndCondParserRuleCall_1_1_0()); }
		ruleAndCond
		{ after(grammarAccess.getAndCondAccess().getRhsAndCondParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotCond__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotCondAccess().getNotNotKeyword_0_0()); }
		(
			{ before(grammarAccess.getNotCondAccess().getNotNotKeyword_0_0()); }
			'not'
			{ after(grammarAccess.getNotCondAccess().getNotNotKeyword_0_0()); }
		)
		{ after(grammarAccess.getNotCondAccess().getNotNotKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotCond__BracketsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotCondAccess().getBracketsBracketsCondParserRuleCall_1_0()); }
		ruleBracketsCond
		{ after(grammarAccess.getNotCondAccess().getBracketsBracketsCondParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__OrcondAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketsCondAccess().getOrcondOrCondParserRuleCall_0_1_0()); }
		ruleOrCond
		{ after(grammarAccess.getBracketsCondAccess().getOrcondOrCondParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketsCond__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketsCondAccess().getConditionConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getBracketsCondAccess().getConditionConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TRACESTRING : '"' ~('"')* '"';

RULE_COMMENTSTRING : '#' ~('\n')* '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
